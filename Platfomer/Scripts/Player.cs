//By: James Singleton (Except _PhysicsProcess, that was written by the engine)
//Date: 8/12/2023
using Godot;
using System;

public partial class Player : CharacterBody2D
{
	/// <summary>
	/// How fast the player moves on screen
	/// </summary>
	[Export]
	public float Speed {get; set;} = 300.0f;
	/// <summary>
	/// How High the player jumps
	/// </summary>
	[Export]
	public float JumpVelocity {get; set;} = -500.0f;
	
	/// <summary>
	/// The bullets the player fires
	/// </summary>
	[Export]
	public PackedScene BulletScene {get; set;}

	/// <summary>
	/// Used to track the spawn point of the bullet when the player shoots
	/// </summary>
	private Marker2D _spawnPoint;

	[Signal]
	public delegate void PlayerSlainEventHandler();

	[Signal]
	public delegate void PlayerReachedGoalEventHandler();

	// Get the gravity from the project settings to be synced with RigidBody nodes.
	public float gravity = ProjectSettings.GetSetting("physics/2d/default_gravity").AsSingle();

	/// <summary>
	/// When the player is loaded into the scene make _spawnPoint refrence BulletSpawnPoint
	/// </summary>
	public override void _Ready()
	{
		_spawnPoint = GetNode<Marker2D>("BulletSpawnPoint");
	}

	/// <summary>
	/// Controls how the player moves in the scene (All of the Code is generated by the engine because Player is a CharacterBody2D)
	/// I just changed directions initialization to use the Input Map actions I set up
	/// </summary>
	/// <param name="delta"></param>
	public override void _PhysicsProcess(double delta)
	{
		Vector2 velocity = Velocity;//the characters instanteous velocity

		// Add the gravity.
		if (!IsOnFloor())
			velocity.Y += gravity * (float)delta;

		// Handle Jump.
		if (Input.IsActionJustPressed("jump") && IsOnFloor())
			velocity.Y = JumpVelocity;

		// Get the input direction and handle the movement/deceleration.
		// As good practice, you should replace UI actions with custom gameplay actions.
		Vector2 direction = Input.GetVector("move_left", "move_right", "climb_up", "climb_down");
		if (direction != Vector2.Zero)
		{
			velocity.X = direction.X * Speed;
		}
		else
		{
			velocity.X = Mathf.MoveToward(Velocity.X, 0, Speed);
		}

		Velocity = velocity;
		MoveAndSlide();//cause the player to move
	}

	/// <summary>
	/// Called every frame. 'delta' is the elapsed time since the previous frame.
	/// Handles the player input for shooting
	/// </summary>
	/// <param name="delta"></param>
	public override void _Process(double delta)
	{
		//if player presses D, shoot to the right
		if(Input.IsActionJustPressed("shoot_right"))
		{
			FireBullet(true);
		}
		//if player presses A, shoot to the left
		if(Input.IsActionJustPressed("shoot_left"))
		{
			FireBullet(false);

		}

	}

	/// <summary>
	/// When the player encounters an Area2D, Respond appropriately based on the Area2D's group
	/// </summary>
	/// <param name="area"></param>
	private void OnPlayerHitBoxAreaEntered(Area2D area)
	{
		//If its a Mob, let Main know the player lost
		if(area.IsInGroup("Mob"))
		{
			EmitSignal(SignalName.PlayerSlain);
		}
		//if it is a Goal, let main know the player won
		else if (area.IsInGroup("Goal"))
		{
			EmitSignal(SignalName.PlayerReachedGoal);
		}
	
	}

	/// <summary>
	/// Creates the bullet on the apropriate side of the PlayerScene
	/// </summary>
	/// <param name="goesRight">If true, the bullet will fly right. If false the bullet will fly left </param>
	private void FireBullet (bool goesRight)
	{
		//In the Engine +X is right and -X is left
		//So direction handles which direction the bullet will fly and which side of the player it spawns on
		int direction = goesRight ? 1 : -1;

		//Makes a new instance of Bullet
		Bullet bullet = BulletScene.Instantiate<Bullet>();
		//Sets the bullet's starting location on the correct side of the player
		bullet.Position = _spawnPoint.Position * direction;
		//Tells the bullet which direction to fly
		bullet.GoesRight = goesRight;
		//adds the bullet to the scen
		AddChild(bullet);
	}
}
